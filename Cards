from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import sqlite3
import requests
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler

# --- HTML, CSS, JS Content as Strings ---
HTML_CONTENT = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Card Collection Value Tracker</title>
    <style>
        /* CSS content goes here */
        body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; color: #333; }
        header { background-color: #333; color: #fff; padding: 1rem 0; text-align: center; }
        main { max-width: 900px; margin: 20px auto; padding: 20px; background-color: #fff; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
        section { margin-bottom: 30px; padding-bottom: 20px; border-bottom: 1px solid #eee; }
        section:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0; }
        h1, h2 { color: #0056b3; }
        #collection-summary { text-align: center; background-color: #e9f5ff; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .summary-cards p { display: inline-block; margin: 0 15px; font-weight: bold; }
        #total-collection-value { font-size: 2.2em; color: #28a745; }
        .last-updated-info { font-size: 0.9em; color: #666; margin-top: 10px; }
        #add-item { text-align: center; }
        #item-form { display: grid; grid-template-columns: 1fr 2fr; gap: 15px; align-items: center; margin: 20px auto; max-width: 600px; }
        #item-form label { font-weight: bold; text-align: right; }
        #item-form input[type="text"], #item-form input[type="number"], #item-form select { width: calc(100% - 20px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
        #item-form button { grid-column: 1 / 3; padding: 12px 20px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; transition: background-color 0.3s ease; }
        #item-form button:hover { background-color: #0056b3; }
        .refresh-btn { padding: 10px 15px; background-color: #ffc107; color: #333; border: none; border-radius: 4px; cursor: pointer; font-size: 0.9em; margin-top: 15px; transition: background-color 0.3s ease; }
        .refresh-btn:hover { background-color: #e0a800; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        table th, table td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        table th { background-color: #f2f2f2; font-weight: bold; }
        table tr:nth-child(even) { background-color: #f9f9f9; }
        .delete-btn { background-color: #dc3545; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 0.8em; transition: background-color 0.3s ease; }
        .delete-btn:hover { background-color: #c82333; }
        footer { text-align: center; padding: 20px; margin-top: 30px; background-color: #333; color: #fff; font-size: 0.9em; }
    </style>
</head>
<body>
    <header>
        <h1>My Card Collection Value Tracker</h1>
    </header>

    <main>
        <section id="collection-summary">
            <h2>Overall Collection Value: $<span id="total-collection-value">0.00</span></h2>
            <div class="summary-cards">
                <p>Total Cards: <span id="total-cards-count">0</span></p>
                <p>Total Packs: <span id="total-packs-count">0</span></p>
                <p>Total Bundles: <span id="total-bundles-count">0</span></p>
            </div>
            <p class="last-updated-info">Last updated: <span id="last-overall-update">N/A</span></p>
        </section>

        <section id="add-item">
            <h2>Add New Item</h2>
            <form id="item-form">
                <label for="item-type">Item Type:</label>
                <select id="item-type" required>
                    <option value="card">Card</option>
                    <option value="pack">Pack</option>
                    <option value="bundle">Bundle</option>
                </select>

                <label for="item-name">Name:</label>
                <input type="text" id="item-name" placeholder="e.g., Charizard (Base Set) or 'Strixhaven Set Booster'" required>

                <label for="item-quantity">Quantity:</label>
                <input type="number" id="item-quantity" min="1" value="1" required>

                <button type="submit">Add Item</button>
            </form>
            <button id="refresh-all-values" class="refresh-btn">Refresh All Values Now</button>
        </section>

        <section id="collection-list">
            <h2>My Collection</h2>
            <table>
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Name</th>
                        <th>Quantity</th>
                        <th>Value Each</th>
                        <th>Total Item Value</th>
                        <th>Last Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="collection-items-body">
                    </tbody>
            </table>
            <p id="no-items-message" style="display: none; text-align: center;">No items in your collection yet. Add some above!</p>
        </section>
    </main>

    <footer>
        <p>&copy; 2025 My Card Collection Tracker</p>
    </footer>

    <script>
        /* JavaScript content goes here */
        document.addEventListener('DOMContentLoaded', () => {
            const backendBaseUrl = window.location.origin + '/api'; // Dynamically get the base URL

            const itemForm = document.getElementById('item-form');
            const collectionItemsBody = document.getElementById('collection-items-body');
            const totalCollectionValueSpan = document.getElementById('total-collection-value');
            const totalCardsCountSpan = document.getElementById('total-cards-count');
            const totalPacksCountSpan = document.getElementById('total-packs-count');
            const totalBundlesCountSpan = document.getElementById('total-bundles-count');
            const lastOverallUpdateSpan = document.getElementById('last-overall-update');
            const refreshAllValuesBtn = document.getElementById('refresh-all-values');
            const noItemsMessage = document.getElementById('no-items-message');

            let collection = [];

            function formatLastUpdated(isoString) {
                if (!isoString) return 'Never';
                const date = new Date(isoString);
                return date.toLocaleString();
            }

            async function loadCollection() {
                try {
                    const response = await fetch(`${backendBaseUrl}/items`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    collection = await response.json();
                    renderCollection();
                    updateSummary();
                } catch (error) {
                    console.error('Error loading collection:', error);
                    // alert('Failed to load collection. Ensure the backend server is running.'); // No need for this alert in single file
                }
            }

            function renderCollection() {
                collectionItemsBody.innerHTML = '';
                if (collection.length === 0) {
                    noItemsMessage.style.display = 'block';
                    return;
                } else {
                    noItemsMessage.style.display = 'none';
                }

                collection.forEach((item) => {
                    const row = collectionItemsBody.insertRow();
                    row.insertCell().textContent = item.type.charAt(0).toUpperCase() + item.type.slice(1);
                    row.insertCell().textContent = item.name;
                    row.insertCell().textContent = item.quantity;
                    row.insertCell().textContent = `$${item.value_each.toFixed(2)}`;
                    row.insertCell().textContent = `$${(item.quantity * item.value_each).toFixed(2)}`;
                    row.insertCell().textContent = formatLastUpdated(item.last_updated);

                    const actionsCell = row.insertCell();
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-btn');
                    deleteButton.onclick = () => deleteItem(item.id);
                    actionsCell.appendChild(deleteButton);
                });
            }

            function updateSummary() {
                let totalValue = 0;
                let totalCards = 0;
                let totalPacks = 0;
                let totalBundles = 0;
                let latestUpdate = null;

                collection.forEach(item => {
                    totalValue += item.quantity * item.value_each;
                    if (item.type === 'card') {
                        totalCards += item.quantity;
                    } else if (item.type === 'pack') {
                        totalPacks += item.quantity;
                    } else if (item.type === 'bundle') {
                        totalBundles += item.quantity;
                    }

                    if (item.last_updated) {
                        const currentItemDate = new Date(item.last_updated);
                        if (!latestUpdate || currentItemDate > latestUpdate) {
                            latestUpdate = currentItemDate;
                        }
                    }
                });

                totalCollectionValueSpan.textContent = totalValue.toFixed(2);
                totalCardsCountSpan.textContent = totalCards;
                totalPacksCountSpan.textContent = totalPacks;
                totalBundlesCountSpan.textContent = totalBundles;
                lastOverallUpdateSpan.textContent = latestUpdate ? latestUpdate.toLocaleString() : 'N/A';
            }

            itemForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                const itemType = document.getElementById('item-type').value;
                const itemName = document.getElementById('item-name').value.trim();
                const itemQuantity = parseInt(document.getElementById('item-quantity').value);

                if (!itemName || isNaN(itemQuantity) || itemQuantity < 1) {
                    alert('Please enter a valid item name and quantity (1 or more).');
                    return;
                }

                const newItemData = { type: itemType, name: itemName, quantity: itemQuantity };

                try {
                    const response = await fetch(`${backendBaseUrl}/items`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(newItemData),
                    });
                    if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                    const result = await response.json();
                    console.log(result.message, result.item);
                    loadCollection();
                    itemForm.reset();
                } catch (error) {
                    console.error('Error adding item:', error);
                    alert('Failed to add item. Check console for details.');
                }
            });

            async function deleteItem(itemId) {
                if (!confirm('Are you sure you want to delete this item?')) { return; }
                try {
                    const response = await fetch(`${backendBaseUrl}/items/${itemId}`, { method: 'DELETE' });
                    if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                    const result = await response.json();
                    console.log(result.message);
                    loadCollection();
                } catch (error) {
                    console.error('Error deleting item:', error);
                    alert('Failed to delete item. Check console for details.');
                }
            }

            refreshAllValuesBtn.addEventListener('click', async () => {
                refreshAllValuesBtn.disabled = true;
                refreshAllValuesBtn.textContent = 'Refreshing...';
                try {
                    const response = await fetch(`${backendBaseUrl}/update_all`, { method: 'POST' });
                    if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
                    const result = await response.json();
                    console.log(result.message);
                    alert(result.message + " The page will update once done.");
                    setTimeout(loadCollection, 3000);
                } catch (error) {
                    console.error('Error triggering refresh:', error);
                    alert('Failed to trigger refresh. Check console for details.');
                } finally {
                    refreshAllValuesBtn.disabled = false;
                    refreshAllValuesBtn.textContent = 'Refresh All Values Now';
                }
            });

            loadCollection();
        });
    </script>
</body>
</html>
"""

app = Flask(__name__)
# CORS is no longer strictly needed if frontend and backend are on the same origin (same file)
# but it doesn't hurt to leave it for broader compatibility or if you separate things later.
CORS(app)

DATABASE = 'collection.db'
TCGPLAYER_API_BASE_URL = "YOUR_TCGPLAYER_API_URL_HERE"
TCGPLAYER_API_KEY = "YOUR_TCGPLAYER_PUBLIC_KEY"
TCGPLAYER_API_PRIVATE_KEY = "YOUR_TCGPLAYER_PRIVATE_KEY"

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                type TEXT NOT NULL,
                name TEXT NOT NULL,
                quantity INTEGER NOT NULL,
                value_each REAL NOT NULL,
                last_updated TEXT NOT NULL
            )
        ''')
        conn.commit()

init_db()

def fetch_realtime_value(item_name, item_type):
    import random
    print(f"DUMMY: Fetching real-time value for: '{item_name}' ({item_type})...")
    if item_type == 'card':
        return round(random.uniform(1.50, 150.00), 2)
    elif item_type == 'pack':
        return round(random.uniform(3.00, 10.00), 2)
    elif item_type == 'bundle':
        return round(random.uniform(20.00, 80.00), 2)
    return 0.0

def update_all_item_values():
    print(f"[{datetime.now()}] Running scheduled update of all item values...")
    conn = get_db_connection()
    cursor = conn.cursor()
    items_to_update = conn.execute('SELECT id, type, name FROM items').fetchall()

    for item in items_to_update:
        current_value = fetch_realtime_value(item['name'], item['type'])
        cursor.execute(
            'UPDATE items SET value_each = ?, last_updated = ? WHERE id = ?',
            (current_value, datetime.now().isoformat(), item['id'])
        )
    conn.commit()
    conn.close()
    print(f"[{datetime.now()}] Finished scheduled update.")

scheduler = BackgroundScheduler()
scheduler.add_job(update_all_item_values, 'interval', hours=1)
scheduler.start()

# --- Flask Routes ---

@app.route('/')
def index():
    # Serve the HTML content directly
    return Response(HTML_CONTENT, mimetype='text/html')

@app.route('/api/items', methods=['GET'])
def get_items():
    conn = get_db_connection()
    items = conn.execute('SELECT * FROM items ORDER BY type, name').fetchall()
    conn.close()
    return jsonify([dict(item) for item in items])

@app.route('/api/items', methods=['POST'])
def add_item():
    data = request.json
    item_type = data['type']
    item_name = data['name']
    quantity = data['quantity']

    real_value = fetch_realtime_value(item_name, item_type)
    last_updated = datetime.now().isoformat()

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO items (type, name, quantity, value_each, last_updated) VALUES (?, ?, ?, ?, ?)",
        (item_type, item_name, quantity, real_value, last_updated)
    )
    conn.commit()
    new_item_id = cursor.lastrowid
    conn.close()

    return jsonify({
        "message": "Item added successfully!",
        "item": {
            "id": new_item_id,
            "type": item_type,
            "name": item_name,
            "quantity": quantity,
            "value_each": real_value,
            "last_updated": last_updated
        }
    }), 201

@app.route('/api/items/<int:item_id>', methods=['DELETE'])
def delete_item(item_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM items WHERE id = ?", (item_id,))
    conn.commit()
    conn.close()
    return jsonify({"message": "Item deleted successfully!"}), 200

@app.route('/api/update_all', methods=['POST'])
def trigger_update():
    update_all_item_values()
    return jsonify({"message": "Manual update triggered. Values will refresh shortly."}), 200

if __name__ == '__main__':
    app.run(debug=True, port=5000)
